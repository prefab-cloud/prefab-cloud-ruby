# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: prefab.proto for package 'prefab'

require 'grpc'
require 'prefab_pb'

module Prefab
  module RateLimitService
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'prefab.RateLimitService'

      rpc :LimitCheck, ::Prefab::LimitRequest, ::Prefab::LimitResponse
    end

    Stub = Service.rpc_stub_class
  end
  module ConfigService
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'prefab.ConfigService'

      rpc :GetConfig, ::Prefab::ConfigServicePointer, stream(::Prefab::Configs)
      rpc :GetAllConfig, ::Prefab::ConfigServicePointer, ::Prefab::Configs
      rpc :Upsert, ::Prefab::Config, ::Prefab::CreationResponse
    end

    Stub = Service.rpc_stub_class
  end
  module IdService
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'prefab.IdService'

      rpc :GetBlock, ::Prefab::IdBlockRequest, ::Prefab::IdBlock
    end

    Stub = Service.rpc_stub_class
  end
  module ClientService
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'prefab.ClientService'

      rpc :GetAll, ::Prefab::Identity, ::Prefab::ConfigEvaluations
    end

    Stub = Service.rpc_stub_class
  end
  module LoggerReportingService
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'prefab.LoggerReportingService'

      rpc :Send, ::Prefab::Loggers, ::Prefab::LoggerReportResponse
    end

    Stub = Service.rpc_stub_class
  end
  module GreetingService
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'prefab.GreetingService'

      rpc :Greet, ::Prefab::GreetingMessage, ::Prefab::GreetingResponse
    end

    Stub = Service.rpc_stub_class
  end
end
